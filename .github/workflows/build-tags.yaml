name: Release

on:
  # Allow manual runs.
  workflow_dispatch:
  # Also run on updates to this repo.
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
  # Run on PRs except for documentation
  pull_request:
    paths-ignore:
      - '**/*.md'

env:
  PLATFORMS: linux/arm/v7,linux/arm64/v8,linux/amd64
  IMAGE_NAME: k9s

jobs:

  build-only:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get latest tagged release
        run: |
          cd k9s
          git fetch --tags
          LATEST_TAG_REV=$(git rev-list --tags --max-count 1)
          K9S_VERSION=$(git describe --tags ${LATEST_TAG_REV})
          echo "K9S_VERSION=${K9S_VERSION}" >> $GITHUB_ENV
          git checkout ${K9S_VERSION}

      - name: Check whether latest release needs building
        run: |
          echo "BUILD_RELEASE=true" >> $GITHUB_ENV
          # Check whether there already is a Docker image for the current tag
          SERVER_TAGS=$(curl -s https://registry.hub.docker.com/v1/repositories/florianpiesche/k9s/tags | jq -r ".[].name") || SERVER_TAGS="none"
          for tag in ${SERVER_TAGS[@]}; do
            if [[ "$tag" == "${K9S_VERSION}" ]]; then
              echo "Release ${tag} has already been built."
              echo "BUILD_RELEASE=false" >> $GITHUB_ENV
              break
            fi
          done

      - name: Docker Setup QEMU
        if: env.BUILD_RELEASE == 'true'
        uses: docker/setup-qemu-action@v1

      - name: Docker Setup Buildx
        if: env.BUILD_RELEASE == 'true'
        uses: docker/setup-buildx-action@v1

      - name: Build ${{ env.IMAGE_NAME }} Docker image
        if: env.BUILD_RELEASE == 'true'
        uses: docker/build-push-action@v2
        with:
          context: ./k9s
          platforms: ${{ env.PLATFORMS }}
          push: false

  build-and-push:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get latest tagged release
        run: |
          cd k9s
          git fetch --tags
          LATEST_TAG_REV=$(git rev-list --tags --max-count 1)
          K9S_VERSION=$(git describe --tags ${LATEST_TAG_REV})
          echo "K9S_VERSION=${K9S_VERSION}" >> $GITHUB_ENV
          git checkout ${K9S_VERSION}

      - name: Check whether latest release needs building
        run: |
          echo "BUILD_RELEASE=true" >> $GITHUB_ENV
          # Check whether there already is a Docker image for the current tag
          SERVER_TAGS=$(curl -s https://registry.hub.docker.com/v1/repositories/florianpiesche/k9s/tags | jq -r ".[].name") || SERVER_TAGS="none"
          for tag in ${SERVER_TAGS[@]}; do
            if [[ "$tag" == "${K9S_VERSION}" ]]; then
              echo "Release ${tag} has already been built."
              echo "BUILD_RELEASE=false" >> $GITHUB_ENV
              break
            fi
          done

      - name: Copy modified Dockerfile into k9s repo
        run: |
          rm ./k9s/Dockerfile
          cp ./Dockerfile ./k9s/Dockerfile

      - name: Docker Setup QEMU
        if: env.BUILD_RELEASE == 'true'
        uses: docker/setup-qemu-action@v1

      - name: Docker Setup Buildx
        if: env.BUILD_RELEASE == 'true'
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: env.BUILD_RELEASE == 'true'
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        if: env.BUILD_RELEASE == 'true'
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push k9s Docker image
        if: env.BUILD_RELEASE == 'true'
        uses: docker/build-push-action@v2
        with:
          context: ./k9s
          build-args: |
            CGO_ENABLED=0
          tags: |
            florianpiesche/k9s:latest
            florianpiesche/k9s:${{ env.K9S_VERSION }}
            ghcr.io/${{ github.repository_owner }}/k9s:latest
            ghcr.io/${{ github.repository_owner }}/k9s:${{ env.K9S_VERSION }}
          platforms: ${{ env.PLATFORMS }}
          push: true
